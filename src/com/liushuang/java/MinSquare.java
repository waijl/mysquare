package com.liushuang.java;import java.awt.BasicStroke;import java.awt.Color;import java.awt.Font;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.LayoutManager;import java.awt.RenderingHints;import java.awt.TextArea;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.awt.geom.Line2D;import java.awt.geom.Rectangle2D;import java.util.ArrayList;import java.util.List;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.JTextField;public class MinSquare {	//三分法判断时的阀值	private static final double INVEAL = 1e-12;	private static final double PI = Math.PI;	private static final double INF = Double.MAX_VALUE;	//存储所有输入的点	private static List<Point> list = new ArrayList<>();	//点的数目	private static int n;	private static JLabel label1;	//输入点的文本编辑框	private static JTextField jTextField1;	private static JLabel label2;	//输入随机点个数的文本编辑框	private static JTextField jTextField2;	//产生随机点的按钮	private static JButton random_generate_dots;	//开始计算的按钮	private static JButton start;	//清除数据的按钮	private static JButton clear;	//显示已经输入的点	private static JTextArea inputedDataLable;	//存储所有输入点中x坐标最大的值	private static double maxx1;	//存储所有输入点中y坐标最大的值	private static double maxy1;	//存储所有输入点中x坐标最小的值	private static double minx1;	//存储所有输入点中y坐标最小的值	private static double miny1;	//最小正方形的边长	private static double ans;	private static JFrame frame;	//上面坐标系部分的内容面板	private static MyPanel myPanel;	//旋转的角度	private static double mAngle;	private static JLabel inputedDataLable1;	private static JLabel jLabelAns;	private static JLabel jLabelArea;	private static JLabel jLabelTime;	/**	 * 通过传入旋转的角度，获取相应角度下最小正方形的边长	 * @param angle 旋转的角度	 * @return	 */	public static double filter(double angle){		double maxx = -INF;		double maxy = -INF;		double minx = INF;		double miny = INF;		for (int i = 0; i < n; i++) {			//坐标旋转angle角度之后的横纵坐标			double tx = list.get(i).getX()*Math.cos(angle) - list.get(i).getY()*Math.sin(angle);			double ty = list.get(i).getX()*Math.sin(angle) + list.get(i).getY()*Math.cos(angle);			maxx = Math.max(maxx, tx);			maxy = Math.max(maxy, ty);			minx = Math.min(minx, tx);			miny = Math.min(miny, ty);		}		maxx1 = maxx;		maxy1 = maxy;		minx1 = minx;		miny1 = miny;		return Math.max(maxx - minx, maxy - miny);	}	/**	 * 通过上面filter()方法获取到旋转角度与最小正方形边长的函数关系	 * 证明可知是一个单峰函数，故可以使用三分法来获取当取某个角度时的	 * 极小值，此时即为最终的最小正方形边长	 * @param left  旋转的初始角度	 * @param right 旋转的最大角度	 * @return	 */	public static double sanFenFa(double left, double right){		double midLeft;		double midRight;        /*考虑过使用平均取三分之一区间来进行比较，        即midLeft = left + (left + right)/3, midRight = right - (left + right)/3        分析比较性能发现，还是使用以下方法性能更优         */		while (right - left > INVEAL){			midLeft = (left + right)/2;			midRight = (midLeft + right)/2;			if (filter(midLeft) > filter(midRight)) {				left = midLeft;			}else {				right = midRight;			}		}		mAngle = left;		return filter(left);	}	/**	 * 向内容面板中添加相应控件	 * @param panel	 */	private static void setJPanelUi(JPanel panel) {		panel.setLayout(null);		inputedDataLable1 = new JLabel("已经输入的点: ");		inputedDataLable1.setBounds(20, 660, 100, 30);		panel.add(inputedDataLable1);		inputedDataLable = new JTextArea();		inputedDataLable.setEditable(false);		inputedDataLable.setLineWrap(true);		JScrollPane jScrollPane = new JScrollPane(inputedDataLable);		jScrollPane.setBounds(150, 660, 750, 50);		panel.add(jScrollPane);		label1 = new JLabel("请输入点的坐标: ");		label1.setBounds(20, 720, 100, 25);		panel.add(label1);		jTextField1 = new JTextField();		jTextField1.setBounds(150, 720, 150, 25);		panel.add(jTextField1);		label2 = new JLabel("请输入随机点个数: ");		label2.setBounds(20, 770, 140, 25);		panel.add(label2);		jTextField2 = new JTextField();		jTextField2.setBounds(150, 770, 150, 25);		panel.add(jTextField2);		random_generate_dots = new JButton("生成随机点");		random_generate_dots.setBounds(150, 820, 180, 25);		panel.add(random_generate_dots);		start = new JButton("开始");		start.setBounds(150, 860, 80, 25);		panel.add(start);		clear = new JButton("清除");		clear.setBounds(250, 860, 80, 25);		panel.add(clear);		jLabelAns = new JLabel();		jLabelAns.setBounds(500, 720, 200, 25);		panel.add(jLabelAns);		jLabelArea = new JLabel();		jLabelArea.setBounds(500, 770, 200, 25);		panel.add(jLabelArea);		jLabelTime = new JLabel();		jLabelTime.setBounds(500, 820, 200, 25);		panel.add(jLabelTime);		//为内容面板设置背景色		panel.setBackground(new Color(224,225,227));		//为生成随机点按钮添加点击监听事件		random_generate_dots.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				randomGenerateDots();			}		});		//为开始计算按钮添加点击监听事件		start.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				startCaculate();			}		});		//为清除数据按钮添加点击监听事件		clear.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				list.clear();				inputedDataLable.setText("");				jTextField1.setText("");				jTextField2.setText("");			}		});		//为输入坐标点的文本编辑框添加回车监听事件		jTextField1.addKeyListener(new KeyAdapter() {			@Override			public void keyTyped(KeyEvent e) {				super.keyTyped(e);				if (e.getKeyChar() == KeyEvent.VK_ENTER){					recordPoint();				}			}		});	}	/**	 * 生成随机点	 */	private static void randomGenerateDots() {		String jTextField2Text = jTextField2.getText();		if (jTextField2Text.isEmpty()){			return;		}		if (!"".equals(jTextField2Text)) {			char num[] = jTextField2Text.toCharArray();//把字符串转换为字符数组			for (int i = 0; i < num.length; i++) {				// 判断输入的数字是否为数字还是字符				if (!Character.isDigit(num[i])) {					jTextField2.setText("输入参数错误！");					return;				}			}		}		n = Integer.parseInt(jTextField2Text);		list.clear();		inputedDataLable.setText("");		for (int i = 0; i < n; i++) {			double pointX = Math.random() * 400 - 200;			double pointY = Math.random() * 400 - 200;			String pointX1 = String.format("%.3f", pointX);			String pointY1 = String.format("%.3f", pointY);			pointX = Double.parseDouble(pointX1);			pointY = Double.parseDouble(pointY1);			Point point = new Point(pointX, pointY);			list.add(point);			String inputedDataLableText = inputedDataLable.getText();			inputedDataLable.setText(inputedDataLableText + "[" + pointX + "," + pointY + "]  ");		}	}	/**	 * 计算的逻辑实现	 */	private static void startCaculate() {		if (list.isEmpty()){			return;		}		double left = 0;		double right = PI/2;		n = list.size();		long timeStart = System.nanoTime();		ans = sanFenFa(left, right);		long timeEnd = System.nanoTime();		double area = ans * ans;		myPanel.repaint();		String anss = String.format("%.3f", ans);		String areas = String.format("%.3f", area);		String spendTime = String.format("%.3f", (timeEnd - timeStart)*(1e-6));		jLabelAns.setText("最小正方形的边长为：" + anss);		jLabelArea.setText("最小正方形的面积为：" + areas);		jLabelTime.setText("计算耗时：" + spendTime + "ms");		System.out.println("ans" + ans);		System.out.println("area" + area);	}	/**	 * 记录下来已经输入的点	 */	private static void recordPoint() {		String textField1Text = jTextField1.getText();		String[] pointXY = textField1Text.split(",");		if (pointXY.length != 2){			jTextField1.setText("输入参数错误！");			return;		}		for (String str : pointXY) {			if (!"".equals(str)) {				char num[] = str.toCharArray();//把字符串转换为字符数组				for (int i = 0; i < num.length; i++) {					// 判断输入的数字是否为数字还是字符					if (!Character.isDigit(num[i]) && num[i] != '-') {						jTextField1.setText("输入参数错误！");						return;					}				}			}		}       /* char[] chars=textField1Text.toCharArray();        if(!(Character.isDigit(chars[0]) && Character.isDigit(chars[2]))){            jTextField1.setText("输入参数错误！");            return;        }*/		System.out.println("input dotX = " + pointXY[0]);		System.out.println("input dotY = " + pointXY[1]);		jTextField1.setText("");		String inputedDataLableText = inputedDataLable.getText();		inputedDataLable.setText(inputedDataLableText + "[" + pointXY[0] + "," + pointXY[1] + "]  ");		double dotX = Double.parseDouble(pointXY[0]);		double doty = Double.parseDouble(pointXY[1]);		Point point = new Point(dotX, doty);		list.add(point);	}	/**	 * 自定义实现画出坐标系的面板	 */	static class MyPanel extends JPanel {		@Override		public void paint(Graphics g) {			super.paint(g);			ImageIcon image = new ImageIcon(this.getClass().getResource("/image/bg3.jpg"));			g.drawImage(image.getImage(),0,0,1000,1000,this);			Graphics2D g2d = (Graphics2D)g;			g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);			g2d.translate(getWidth() / 2, getHeight() / 2);//            g2d.scale(1, -1);			//画出坐标系			g2d.drawLine(-320, 0, 335, 0);			g2d.drawLine(0, -320, 0, 320);			g2d.drawString("x", 340, 10);			g2d.drawString("y", -10, 320);			int ans1 = new Double(ans).intValue();			double m=0;			//通过区分不同尺寸的最小正方形边长大小进行相应的图形缩放			if (ans >= 1 && ans < 10){				m = 30;				for (int i = -10; i <= 10; i++) {					g2d.drawString(i + "", (int) (m * i), -1);					g2d.drawString(i + "", 1, (int) (m * i));				}			}else if (ans >= 10 && ans < 20){				m = 15;				for (int i = -10; i <= 10; i++) {					g2d.drawString(i*2 + "", (int) (30 * i), -1);					g2d.drawString(i*2 + "", 1, (int) (30 * i));				}			}else if (ans >= 20 && ans < 30){				m = 10;				for (int i = -10; i <= 10; i++) {					g2d.drawString(i*3 + "", (int) (30 * i), -1);					g2d.drawString(i*3 + "", 1, (int) (30 * i));				}			} else if(ans >= 30 && ans < 50){				m = 6;				for (int i = -10; i <= 10; i++) {					g2d.drawString(i*5 + "", (int) (30 * i), -1);					g2d.drawString(i*5 + "", 1, (int) (30 * i));				}			}else if (ans >= 50 && ans < 100){				m = 3;				for (int i = -10; i <= 10; i++) {					g2d.drawString(i*10 + "", (int) (30 * i), -1);					g2d.drawString(i*10 + "", 1, (int) (30 * i));				}			}else if (ans >= 100 && ans < 150){				m = 2;				for (int i = -10; i <= 10; i++) {					g2d.drawString(i*15 + "", (int) (30 * i), -1);					g2d.drawString(i*15 + "", 1, (int) (30 * i));				}			}else {				m = 1;				for (int i = -10; i <= 10; i++) {					g2d.drawString(i*30 + "", (int) (30 * i), -1);					g2d.drawString(i*30 + "", 1, (int) (30 * i));				}			}			for (Point point : list) {				double pointX = m * point.getX();				double pointY = m * point.getY();				g2d.setStroke(new BasicStroke(5));				//画出所有的输入点				g2d.draw(new Line2D.Double(pointX,pointY,pointX,pointY));			}			System.out.println("Angle = " + mAngle);			g2d.setStroke(new BasicStroke(1));			g2d.rotate(-mAngle, 0, 0);			//画出最小的正方形			g2d.setColor(Color.blue);			g2d.draw(new Rectangle2D.Double(m*minx1, m*miny1, m*ans, m*ans));//            g2d.drawRect(minx3, miny3, ans2, ans2);			g2d.setColor(Color.RED);			/*g2d.drawRect(maxx3 - ans2, maxy3 - ans2, ans2, ans2);*/			g2d.draw(new Rectangle2D.Double(m*(maxx1-ans), m*(maxy1-ans), m*ans, m*ans));		}	}	/**	 * 程序启动的入口	 * @param args	 */	public static void main(String[] args) {		frame = new JFrame("最小正方形");		frame.setSize(1000, 1000);		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		myPanel = new MyPanel();		myPanel.setBounds(0,0, 1000, 650);		frame.add(myPanel);		JPanel panel = new JPanel();		frame.add(panel);		setJPanelUi(panel);		frame.setVisible(true);		frame.setResizable(false);	}}